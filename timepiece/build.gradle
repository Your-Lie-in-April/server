plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.4.5'
}

group = 'com.appcenter'
version = '0.0.1-SNAPSHOT'

jib {
    from {
        image = 'eclipse-temurin:17-jre'
    }
    to {
        image = 'jnamu/timepiece-server'
        tags = ['latest', "${project.version}"]
    }
    container {
        jvmFlags = ['-Dspring.config.location=file:/resources/application.yml']
    }
}

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //jwt 토큰 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // com.fasterxml.jackson.databind.exc.InvalidDefinitionException:
    // Java 8 date/time type `java.time.LocalDateTime` not supported by default:
    // add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling Notification["createdAt"]
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //데이터베이스 : mysql 사용
    runtimeOnly 'com.mysql:mysql-connector-j'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core:3.27.3'
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDir querydslDir
}

tasks.named('compileJava') {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

tasks.named('clean') {
    doLast {
        file(querydslDir).deleteDir()
    }
}

tasks.named('test') {
    useJUnitPlatform()
}